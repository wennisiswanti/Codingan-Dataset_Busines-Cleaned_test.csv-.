# -*- coding: utf-8 -*-
"""Kelompok 4. Bussines (Cleaned_test.csv)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nRUKMNufBrnogbGboWPVs6zRbwQ3zmCu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

cleaned_df = pd.read_csv('cleaned_test.csv')

cleaned = pd.read_csv('cleaned_test.csv')

"""# 1. menampilkan data set sesuai dengan format dari cleaned_test.csv"""

cleaned

"""# 2. menampilkan kolom"""

cleaned.columns

"""# 3. menampilkan jumlah baris dan jumlah kolom dari dataset"""

cleaned.shape

print ("Jumlah Baris:",cleaned.shape[0])
print ("Jumlah Kolom:",cleaned.shape[1])

"""# 4. menampilkan informasi tentang dataset seperti jumlah total baris, jumlah total kolom, tipe data dari setiap kolom dan kebutuhan memori"""

cleaned.info()

"""# 5. menampilkan tipe data"""

cleaned.dtypes

"""# 6. Menampilkan seluruh Dataset"""

print(df)

"""# 7. membagi dataset"""

x = cleaned.iloc[:,:-1]. values
y = cleaned.iloc[:,-1].values

print (x)

"""# 8. menampilkan 20 data pertama cleaned.head(20)"""

cleaned.head(20)

"""# 9. menampilkan 10 data terakhir"""

cleaned.tail(10)

"""# 10. menampilakan macam-macam type of order"""

cleaned_Type_of_order = list(cleaned['Type_of_order'].unique())
cleaned_Type_of_order.sort()
cleaned_Type_of_order

"""#11.  menampilkan berapa kali weather muncul"""

cleaned['Weather'].value_counts()

"""# 12. memvisualisasikan jumlah rating"""

plt.figure(figsize=(8,5))
sns.countplot (x='Road_traffic_density',data=cleaned)

"""# 13. menampilkan dan menghitung jumlah Vehicle condition 1"""



df = pd.read_csv('cleaned_test.csv')
Vehicle_condition_1 = df[df['Vehicle_condition'] == 1]
print("Jumlah msft rating 4:",len(Vehicle_condition_1))

cleaned_Vehicle_condition1 = cleaned_df[(cleaned_df['Vehicle_condition'] == 1)]
cleaned_Vehicle_condition1.head(10)

"""# 14. Menampilkan Delivery_person_ID,Type_of_order, Weather dan Type_of_vehicle"""

cleaned_data = cleaned_df[['Delivery_person_ID', 'Type_of_order', 'Weather', 'Type_of_vehicle']]
print(cleaned_data)

"""# 15. menghitung jumlah cleaned Vehicle condition yang ada"""

jumlah_cleaned_Vehicle_condition = cleaned_df['Vehicle_condition'].value_counts()

print(jumlah_cleaned_Vehicle_condition)

"""# 16.menampilkan jumlah kondisi kendaraan terbanyak dan tipe kendaraan"""

cleaned_Vehicle_condition = cleaned.loc[cleaned['Vehicle_condition'].idxmax()]

print("Kondisi kendaraan terbanyak")
print("Tipe kendaraan:",cleaned_Vehicle_condition ['Type_of_vehicle'])
print("Kondisi kendaraan:",cleaned_Vehicle_condition['Vehicle_condition'])

"""# 17.menampilkan jumlah kondisi kendaraan paling sedikit dan tipe kendaraan"""

cleaned_Vehicle_condition = cleaned.loc[cleaned['Vehicle_condition'].idxmin()]

print("Kondisi kendaraan terkecil")
print("Tipe kendaraan:",cleaned_Vehicle_condition ['Type_of_vehicle'])
print("Kondisi kendaraan:",cleaned_Vehicle_condition['Vehicle_condition'])

"""# 18. menampilkan Type_of_order dengan Vehicle_condition terbanyak"""

Type_of_order_Vehicle_condition = cleaned.groupby('Type_of_order')[['Vehicle_condition']].sum()
Sorted_Vehicle_condition = Type_of_order_Vehicle_condition.sort_values('Vehicle_condition', ascending = False) [:4]
Sorted_Vehicle_condition

"""# 19. Memvisualisasikan jumlah dan 'tipe order' dari dataset"""

plt.figure(figsize=(10,5))
sns.countplot(x='Type_of_order', data=cleaned)
plt.xlabel('tipe order')
plt.ylabel('Count')
plt.title('Cleaned Plot')
plt.show()

"""# 20.  menghitung jumlah Type_of_vehicle dengan tipe tertentu"""

len (cleaned[cleaned['Type_of_vehicle'].str.contains('scooter')])

"""# 21. menampilkan 2 Vehicle_condition dengan Delivery_person_ID, Ty peof vehicle dan Vehicle_condition"""

cleaned.nlargest(2, 'Vehicle_condition') [['Delivery_person_ID', 'Type_of_vehicle', 'Vehicle_condition']]

"""# 22. mengklasifikasikan data cleaned berdasarkan Delivery_person_Ratings[Excellent, good, dan Average]"""

def Delivery_person_Ratings(Delivery_person_Ratings):
  if Delivery_person_Ratings>=4.9:
    return "Excellent"
  elif Delivery_person_Ratings>=4.5:
    return "Good"
  else:
    return "Average"

cleaned['rate']=cleaned['Delivery_person_Ratings'].apply(Delivery_person_Ratings)
cleaned.head()

"""# 23. menampilkan 15 data dengan Delivery person Ratings tertinggi"""

cleaned.nlargest(15, 'Delivery_person_Ratings') [['Delivery_person_ID', 'Type_of_vehicle', 'Delivery_person_Ratings']]

"""# 24. menampilkan 3 Delivery_person_Age tertinggi"""

cleaned.nlargest(3, 'Delivery_person_Age') [[ 'Type_of_vehicle', 'Delivery_person_Age']]

"""# 25.Memvisualisasikan Delivery_person_Age dengan rata-rata Delivery person Ratings tertinggi"""

plt.figure(figsize=(8,5))
sns.barplot (x='Delivery_person_Ratings', y='Delivery_person_Age', data=cleaned)
plt.title("Delivery person Ratings tertinggi")
plt.show()

"""# 26. menampilkan Delivery_person_Ratings yang lebih dari 4.6"""

cleaned[cleaned['Delivery_person_Ratings']>=4.6] [['Type_of_vehicle', 'Delivery_person_Ratings'] ]

"""# 27. Menghitung jumlah Delivery person Ratings yang ada"""

jumlah_Delivery_person_Ratings = cleaned_df['Delivery_person_Ratings'].value_counts()

print(jumlah_Delivery_person_Ratings)

"""# 28. memvisualisasikan jumlah Weather"""

plt.figure(figsize=(10,5))
sns.countplot (x='Weather',data=cleaned)

"""# 29. Menampilkan Type of order dan Order Date"""

cleaned_Order_Date_data = cleaned_df[['Type_of_order', 'Order_Date']]
print(cleaned_Order_Date_data)